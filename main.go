package main

import (
	"log"
	"net/http"
	"os"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"
	"github.com/lokhman/example-users-microservice/api"
	_ "github.com/lokhman/example-users-microservice/docs"
	"github.com/lokhman/example-users-microservice/model"
	"github.com/nsqio/go-nsq"
	"github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
)

// Connects to database by DSN and sets logging mode.
func connectDatabase(driver, dsn string) *gorm.DB {
	db, err := gorm.Open(driver, dsn)
	if err != nil {
		log.Fatalln(err)
	}
	if gin.Mode() == gin.DebugMode {
		db.LogMode(true)
	}
	db.AutoMigrate(&model.User{})
	return db
}

// Connects to NSQ server and returns producer.
func connectNSQ(addr string) *nsq.Producer {
	p, err := nsq.NewProducer(addr, nsq.NewConfig())
	if err != nil {
		log.Fatalln(err)
	}
	return p
}

// Creates GIN router.
func createRouter(api *api.API) *gin.Engine {
	r := gin.Default()
	r.Use(gin.Logger())
	r.Use(gin.Recovery())

	// simple endpoint for health check
	r.GET("/", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"now": time.Now()})
	})

	// users routing
	r.GET("/users", api.UserIndexHandler)
	r.POST("/users", api.UserCreateHandler)
	r.GET("/users/:id", api.UserViewHandler)
	r.PUT("/users/:id", api.UserUpdateHandler)
	r.DELETE("/users/:id", api.UserDeleteHandler)

	// autogenerated documentation
	r.GET("/docs/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	return r
}

// @title         Example Users Microservice
// @version       0.1
// @description   This is the example microservice for manipulating users.
// @contact.name  Alex Lokhman
// @contact.url   https://github.com/lokhman
// @contact.email alex.lokhman@gmail.com
func main() {
	// connect to database server (using PostgreSQL, but can be abstracted to other driver with ORM)
	db := connectDatabase("postgres", os.Getenv("DATABASE_URL"))
	defer func() { _ = db.Close() }()

	// connect to NSQ server
	p := connectNSQ(os.Getenv("NSQ_ADDR"))
	defer p.Stop()

	// create GIN router
	r := createRouter(&api.API{DB: db, NSQ: p})

	// address parameter may come from CLI flags for scalability if designed to balance multiple nodes
	// but in containerised environments can be achieved by port mapping
	log.Fatalln(r.Run(":8000"))
}
